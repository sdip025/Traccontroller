package com.gps21.model;

// Generated Mar 16, 2017 3:16:37 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Reports generated by hbm2java
 */
@Entity
@Table(name = "reports", catalog = "traccar")
public class Reports implements java.io.Serializable {

	private Long id;
	private Boolean disableFilter;
	private Date fromDate;
	private boolean includeMap;
	private String name;
	private String period;
	private Boolean preview;
	private Date toDate;
	private String type;
	private Set<Devices> deviceses = new HashSet<Devices>(0);
	private Set<Users> userses = new HashSet<Users>(0);
	private Set<Geofences> geofenceses = new HashSet<Geofences>(0);

	public Reports() {
	}

	public Reports(boolean includeMap) {
		this.includeMap = includeMap;
	}

	public Reports(Boolean disableFilter, Date fromDate, boolean includeMap,
			String name, String period, Boolean preview, Date toDate,
			String type, Set<Devices> deviceses, Set<Users> userses,
			Set<Geofences> geofenceses) {
		this.disableFilter = disableFilter;
		this.fromDate = fromDate;
		this.includeMap = includeMap;
		this.name = name;
		this.period = period;
		this.preview = preview;
		this.toDate = toDate;
		this.type = type;
		this.deviceses = deviceses;
		this.userses = userses;
		this.geofenceses = geofenceses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "disableFilter")
	public Boolean getDisableFilter() {
		return this.disableFilter;
	}

	public void setDisableFilter(Boolean disableFilter) {
		this.disableFilter = disableFilter;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fromDate", length = 19)
	public Date getFromDate() {
		return this.fromDate;
	}

	public void setFromDate(Date fromDate) {
		this.fromDate = fromDate;
	}

	@Column(name = "includeMap", nullable = false)
	public boolean isIncludeMap() {
		return this.includeMap;
	}

	public void setIncludeMap(boolean includeMap) {
		this.includeMap = includeMap;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "period")
	public String getPeriod() {
		return this.period;
	}

	public void setPeriod(String period) {
		this.period = period;
	}

	@Column(name = "preview")
	public Boolean getPreview() {
		return this.preview;
	}

	public void setPreview(Boolean preview) {
		this.preview = preview;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "toDate", length = 19)
	public Date getToDate() {
		return this.toDate;
	}

	public void setToDate(Date toDate) {
		this.toDate = toDate;
	}

	@Column(name = "type")
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "reports_devices", catalog = "traccar", joinColumns = { @JoinColumn(name = "report_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "device_id", nullable = false, updatable = false) })
	public Set<Devices> getDeviceses() {
		return this.deviceses;
	}

	public void setDeviceses(Set<Devices> deviceses) {
		this.deviceses = deviceses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "reports_users", catalog = "traccar", joinColumns = { @JoinColumn(name = "report_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) })
	public Set<Users> getUserses() {
		return this.userses;
	}

	public void setUserses(Set<Users> userses) {
		this.userses = userses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "reports_geofences", catalog = "traccar", joinColumns = { @JoinColumn(name = "report_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "geofence_id", nullable = false, updatable = false) })
	public Set<Geofences> getGeofenceses() {
		return this.geofenceses;
	}

	public void setGeofenceses(Set<Geofences> geofenceses) {
		this.geofenceses = geofenceses;
	}

}
