package com.gps21.model;

// Generated Mar 16, 2017 3:16:37 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Cacheable;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * Users generated by hbm2java
 */
@Entity
/*@Cacheable
@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)*/
@Table(name = "users", catalog = "traccar", uniqueConstraints = @UniqueConstraint(columnNames = "login"))
public class Users implements java.io.Serializable {

	private Long id;
	private Users users;
	private UserSettings userSettings;
	private Boolean admin;
	private Boolean archive;
	private Boolean blocked;
	private String companyName;
	private String email;
	private Date expirationDate;
	private String firstName;
	private String lastName;
	private String login;
	private Boolean manager;
	private Integer maxNumOfDevices;
	private Boolean notifications;
	private String password;
	private Integer passwordHashMethod;
	private String phoneNumber;
	private Boolean readOnly;
	private Set<UiState> uiStates = new HashSet<UiState>(0);
	private Set<Reports> reportses = new HashSet<Reports>(0);
	private Set<Devices> deviceses = new HashSet<Devices>(0);
	private Set<Geofences> geofenceses = new HashSet<Geofences>(0);
	private Set<Users> userses = new HashSet<Users>(0);
	private Set<UsersNotifications> usersNotificationses = new HashSet<UsersNotifications>(
			0);
	private Set<Devices> deviceses_1 = new HashSet<Devices>(0);
	private Set<NotificationSettings> notificationSettingses = new HashSet<NotificationSettings>(
			0);
	private Set<Groups> groupses = new HashSet<Groups>(0);

	public Users() {
	}

	public Users(Users users, UserSettings userSettings, Boolean admin,
			Boolean archive, Boolean blocked, String companyName, String email,
			Date expirationDate, String firstName, String lastName,
			String login, Boolean manager, Integer maxNumOfDevices,
			Boolean notifications, String password, Integer passwordHashMethod,
			String phoneNumber, Boolean readOnly, Set<UiState> uiStates,
			Set<Reports> reportses, Set<Devices> deviceses,
			Set<Geofences> geofenceses, Set<Users> userses,
			Set<UsersNotifications> usersNotificationses,
			Set<Devices> deviceses_1,
			Set<NotificationSettings> notificationSettingses,
			Set<Groups> groupses) {
		this.users = users;
		this.userSettings = userSettings;
		this.admin = admin;
		this.archive = archive;
		this.blocked = blocked;
		this.companyName = companyName;
		this.email = email;
		this.expirationDate = expirationDate;
		this.firstName = firstName;
		this.lastName = lastName;
		this.login = login;
		this.manager = manager;
		this.maxNumOfDevices = maxNumOfDevices;
		this.notifications = notifications;
		this.password = password;
		this.passwordHashMethod = passwordHashMethod;
		this.phoneNumber = phoneNumber;
		this.readOnly = readOnly;
		this.uiStates = uiStates;
		this.reportses = reportses;
		this.deviceses = deviceses;
		this.geofenceses = geofenceses;
		this.userses = userses;
		this.usersNotificationses = usersNotificationses;
		this.deviceses_1 = deviceses_1;
		this.notificationSettingses = notificationSettingses;
		this.groupses = groupses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "managedBy_id")
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userSettings_id")
	public UserSettings getUserSettings() {
		return this.userSettings;
	}

	public void setUserSettings(UserSettings userSettings) {
		this.userSettings = userSettings;
	}

	@Column(name = "admin")
	public Boolean getAdmin() {
		return this.admin;
	}

	public void setAdmin(Boolean admin) {
		this.admin = admin;
	}

	@Column(name = "archive")
	public Boolean getArchive() {
		return this.archive;
	}

	public void setArchive(Boolean archive) {
		this.archive = archive;
	}

	@Column(name = "blocked")
	public Boolean getBlocked() {
		return this.blocked;
	}

	public void setBlocked(Boolean blocked) {
		this.blocked = blocked;
	}

	@Column(name = "companyName")
	public String getCompanyName() {
		return this.companyName;
	}

	public void setCompanyName(String companyName) {
		this.companyName = companyName;
	}

	@Column(name = "email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "expirationDate", length = 10)
	public Date getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}

	@Column(name = "firstName")
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "lastName")
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "login", unique = true)
	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	@Column(name = "manager")
	public Boolean getManager() {
		return this.manager;
	}

	public void setManager(Boolean manager) {
		this.manager = manager;
	}

	@Column(name = "maxNumOfDevices")
	public Integer getMaxNumOfDevices() {
		return this.maxNumOfDevices;
	}

	public void setMaxNumOfDevices(Integer maxNumOfDevices) {
		this.maxNumOfDevices = maxNumOfDevices;
	}

	@Column(name = "notifications")
	public Boolean getNotifications() {
		return this.notifications;
	}

	public void setNotifications(Boolean notifications) {
		this.notifications = notifications;
	}

	@Column(name = "password")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "password_hash_method")
	public Integer getPasswordHashMethod() {
		return this.passwordHashMethod;
	}

	public void setPasswordHashMethod(Integer passwordHashMethod) {
		this.passwordHashMethod = passwordHashMethod;
	}

	@Column(name = "phoneNumber")
	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	@Column(name = "readOnly")
	public Boolean getReadOnly() {
		return this.readOnly;
	}

	public void setReadOnly(Boolean readOnly) {
		this.readOnly = readOnly;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<UiState> getUiStates() {
		return this.uiStates;
	}

	public void setUiStates(Set<UiState> uiStates) {
		this.uiStates = uiStates;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "reports_users", catalog = "traccar", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "report_id", nullable = false, updatable = false) })
	public Set<Reports> getReportses() {
		return this.reportses;
	}

	public void setReportses(Set<Reports> reportses) {
		this.reportses = reportses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Devices> getDeviceses() {
		return this.deviceses;
	}

	public void setDeviceses(Set<Devices> deviceses) {
		this.deviceses = deviceses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "users_geofences", catalog = "traccar", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "geofence_id", nullable = false, updatable = false) })
	public Set<Geofences> getGeofenceses() {
		return this.geofenceses;
	}

	public void setGeofenceses(Set<Geofences> geofenceses) {
		this.geofenceses = geofenceses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Users> getUserses() {
		return this.userses;
	}

	public void setUserses(Set<Users> userses) {
		this.userses = userses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<UsersNotifications> getUsersNotificationses() {
		return this.usersNotificationses;
	}

	public void setUsersNotificationses(
			Set<UsersNotifications> usersNotificationses) {
		this.usersNotificationses = usersNotificationses;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "users_devices", catalog = "traccar", joinColumns = { @JoinColumn(name = "users_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "devices_id", nullable = false, updatable = false) })
	public Set<Devices> getDeviceses_1() {
		return this.deviceses_1;
	}

	public void setDeviceses_1(Set<Devices> deviceses_1) {
		this.deviceses_1 = deviceses_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<NotificationSettings> getNotificationSettingses() {
		return this.notificationSettingses;
	}

	public void setNotificationSettingses(
			Set<NotificationSettings> notificationSettingses) {
		this.notificationSettingses = notificationSettingses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "groups_users", catalog = "traccar", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "group_id", nullable = false, updatable = false) })
	public Set<Groups> getGroupses() {
		return this.groupses;
	}

	public void setGroupses(Set<Groups> groupses) {
		this.groupses = groupses;
	}

}
