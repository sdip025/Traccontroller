package com.gps21.model;

// Generated Mar 16, 2017 3:16:37 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * UserSettings generated by hbm2java
 */
@Entity
@Table(name = "user_settings", catalog = "traccar")
public class UserSettings implements java.io.Serializable {

	private Long id;
	private String archiveMarkerType;
	private Double centerLatitude;
	private Double centerLongitude;
	private Short followedDeviceZoomLevel;
	private Boolean hideDuplicates;
	private Boolean hideInvalidLocations;
	private Boolean hideZeroCoordinates;
	private String mapType;
	private Boolean maximizeOverviewMap;
	private Double minDistance;
	private String overlays;
	private Double speedForFilter;
	private String speedModifier;
	private String speedUnit;
	private Short timePrintInterval;
	private String timeZoneId;
	private Short traceInterval;
	private Integer zoomLevel;
	private Set<ApplicationSettings> applicationSettingses = new HashSet<ApplicationSettings>(
			0);
	private Set<Users> userses = new HashSet<Users>(0);

	public UserSettings() {
	}

	public UserSettings(String archiveMarkerType, Double centerLatitude,
			Double centerLongitude, Short followedDeviceZoomLevel,
			Boolean hideDuplicates, Boolean hideInvalidLocations,
			Boolean hideZeroCoordinates, String mapType,
			Boolean maximizeOverviewMap, Double minDistance, String overlays,
			Double speedForFilter, String speedModifier, String speedUnit,
			Short timePrintInterval, String timeZoneId, Short traceInterval,
			Integer zoomLevel, Set<ApplicationSettings> applicationSettingses,
			Set<Users> userses) {
		this.archiveMarkerType = archiveMarkerType;
		this.centerLatitude = centerLatitude;
		this.centerLongitude = centerLongitude;
		this.followedDeviceZoomLevel = followedDeviceZoomLevel;
		this.hideDuplicates = hideDuplicates;
		this.hideInvalidLocations = hideInvalidLocations;
		this.hideZeroCoordinates = hideZeroCoordinates;
		this.mapType = mapType;
		this.maximizeOverviewMap = maximizeOverviewMap;
		this.minDistance = minDistance;
		this.overlays = overlays;
		this.speedForFilter = speedForFilter;
		this.speedModifier = speedModifier;
		this.speedUnit = speedUnit;
		this.timePrintInterval = timePrintInterval;
		this.timeZoneId = timeZoneId;
		this.traceInterval = traceInterval;
		this.zoomLevel = zoomLevel;
		this.applicationSettingses = applicationSettingses;
		this.userses = userses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "archiveMarkerType")
	public String getArchiveMarkerType() {
		return this.archiveMarkerType;
	}

	public void setArchiveMarkerType(String archiveMarkerType) {
		this.archiveMarkerType = archiveMarkerType;
	}

	@Column(name = "centerLatitude", precision = 22, scale = 0)
	public Double getCenterLatitude() {
		return this.centerLatitude;
	}

	public void setCenterLatitude(Double centerLatitude) {
		this.centerLatitude = centerLatitude;
	}

	@Column(name = "centerLongitude", precision = 22, scale = 0)
	public Double getCenterLongitude() {
		return this.centerLongitude;
	}

	public void setCenterLongitude(Double centerLongitude) {
		this.centerLongitude = centerLongitude;
	}

	@Column(name = "followedDeviceZoomLevel")
	public Short getFollowedDeviceZoomLevel() {
		return this.followedDeviceZoomLevel;
	}

	public void setFollowedDeviceZoomLevel(Short followedDeviceZoomLevel) {
		this.followedDeviceZoomLevel = followedDeviceZoomLevel;
	}

	@Column(name = "hideDuplicates")
	public Boolean getHideDuplicates() {
		return this.hideDuplicates;
	}

	public void setHideDuplicates(Boolean hideDuplicates) {
		this.hideDuplicates = hideDuplicates;
	}

	@Column(name = "hideInvalidLocations")
	public Boolean getHideInvalidLocations() {
		return this.hideInvalidLocations;
	}

	public void setHideInvalidLocations(Boolean hideInvalidLocations) {
		this.hideInvalidLocations = hideInvalidLocations;
	}

	@Column(name = "hideZeroCoordinates")
	public Boolean getHideZeroCoordinates() {
		return this.hideZeroCoordinates;
	}

	public void setHideZeroCoordinates(Boolean hideZeroCoordinates) {
		this.hideZeroCoordinates = hideZeroCoordinates;
	}

	@Column(name = "mapType")
	public String getMapType() {
		return this.mapType;
	}

	public void setMapType(String mapType) {
		this.mapType = mapType;
	}

	@Column(name = "maximizeOverviewMap")
	public Boolean getMaximizeOverviewMap() {
		return this.maximizeOverviewMap;
	}

	public void setMaximizeOverviewMap(Boolean maximizeOverviewMap) {
		this.maximizeOverviewMap = maximizeOverviewMap;
	}

	@Column(name = "minDistance", precision = 22, scale = 0)
	public Double getMinDistance() {
		return this.minDistance;
	}

	public void setMinDistance(Double minDistance) {
		this.minDistance = minDistance;
	}

	@Column(name = "overlays")
	public String getOverlays() {
		return this.overlays;
	}

	public void setOverlays(String overlays) {
		this.overlays = overlays;
	}

	@Column(name = "speedForFilter", precision = 22, scale = 0)
	public Double getSpeedForFilter() {
		return this.speedForFilter;
	}

	public void setSpeedForFilter(Double speedForFilter) {
		this.speedForFilter = speedForFilter;
	}

	@Column(name = "speedModifier")
	public String getSpeedModifier() {
		return this.speedModifier;
	}

	public void setSpeedModifier(String speedModifier) {
		this.speedModifier = speedModifier;
	}

	@Column(name = "speedUnit")
	public String getSpeedUnit() {
		return this.speedUnit;
	}

	public void setSpeedUnit(String speedUnit) {
		this.speedUnit = speedUnit;
	}

	@Column(name = "timePrintInterval")
	public Short getTimePrintInterval() {
		return this.timePrintInterval;
	}

	public void setTimePrintInterval(Short timePrintInterval) {
		this.timePrintInterval = timePrintInterval;
	}

	@Column(name = "timeZoneId")
	public String getTimeZoneId() {
		return this.timeZoneId;
	}

	public void setTimeZoneId(String timeZoneId) {
		this.timeZoneId = timeZoneId;
	}

	@Column(name = "traceInterval")
	public Short getTraceInterval() {
		return this.traceInterval;
	}

	public void setTraceInterval(Short traceInterval) {
		this.traceInterval = traceInterval;
	}

	@Column(name = "zoomLevel")
	public Integer getZoomLevel() {
		return this.zoomLevel;
	}

	public void setZoomLevel(Integer zoomLevel) {
		this.zoomLevel = zoomLevel;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userSettings")
	public Set<ApplicationSettings> getApplicationSettingses() {
		return this.applicationSettingses;
	}

	public void setApplicationSettingses(
			Set<ApplicationSettings> applicationSettingses) {
		this.applicationSettingses = applicationSettingses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userSettings")
	public Set<Users> getUserses() {
		return this.userses;
	}

	public void setUserses(Set<Users> userses) {
		this.userses = userses;
	}

}
